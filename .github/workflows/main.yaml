name: "main job"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - "*"
  release:
    types: [published]

jobs:
  install-connect-iq:
    name: "Install ConnectIQ"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - uses: actions/cache@v2
        id: ciq
        with:
          path: /opt/ciq
          key: ciq-install

      - uses: actions/cache@v2
        id: devices
        with:
          path: ~/.Garmin/ConnectIQ
          key: devices-${{ hashFiles('manifest.xml') }}

      - run: |
          sudo apt-get install --reinstall unzip wget git ssh tar gzip ca-certificates
          cd /opt;
          wget -q https://developer.garmin.com/downloads/connect-iq/sdks/connectiq-sdk-lin-3.2.5-2021-02-12-6d31f4357.zip -O ciq.zip;
          unzip ciq.zip -d ciq;
          rm -f ciq.zip;
        if: steps.ciq.outputs.cache-hit != 'true'
        name: Install ConnectIQ SDK

      - run: |
          pip install -r cicd/requirements.txt
          python cicd/get_garmin_devices.py
        if: steps.devices.outputs.cache-hit != 'true'
        name: Install ConnectIQ Devices
        env:
          GARMIN_ACCESS_TOKEN: ${{ secrets.GARMIN_ACCESS_TOKEN }}
          PYTHONUNBUFFERED: 1

  build-ciq:
    name: "Build CIQ"
    runs-on: ubuntu-18.04
    needs: "install-connect-iq"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "8"

      - uses: actions/cache@v2
        id: ciq
        with:
          path: /opt/ciq
          key: ciq-install

      - uses: actions/cache@v2
        id: devices
        with:
          path: ~/.Garmin/ConnectIQ
          key: devices-${{ hashFiles('manifest.xml') }}

      - run: |
          sed -i "s/0.0.0/${{ github.event.release.tag_name }}/g" manifest.xml
          if [[ "${{ github.event.release.tag_name }}" =~ "beta" ]]; then
            sed -i "s/4fa3fd29424b46819c4f4d4229cf8051/66a49cdf-46f8-4a50-8e94-6455da238d5f/g" manifest.xml
          fi
        if: github.event_name == 'release'
        name: set the release version

      - run: |
          echo /opt/ciq/bin >> $GITHUB_PATH
          echo "$CIQ_DEV_KEY" | base64 -d > /tmp/dev.key
          for i in $(grep "product id=" manifest.xml | cut -d \" -f2); do
            java -Dfile.encoding=UTF-8 -Dapple.awt.UIElement=true -jar /opt/ciq/bin/monkeybrains.jar -o /tmp/RunPowerWorkout-$i.prg -w -y /tmp/dev.key -d $i -s 3.2.0 -f monkey.jungle
          done
          java -Dfile.encoding=UTF-8 -Dapple.awt.UIElement=true -jar /opt/ciq/bin/monkeybrains.jar -o /tmp/RunPowerWorkout.iq -e -w -y /tmp/dev.key -r -f monkey.jungle;
        name: Build IQ file
        env:
          CIQ_DEV_KEY: ${{ secrets.CIQ_DEVELOPER_KEY }}

      - uses: actions/upload-artifact@v2
        with:
          name: prg
          path: /tmp/*.prg
        if: github.event_name != 'release'

      - uses: actions/upload-artifact@v2
        with:
          name: iq
          path: /tmp/*.iq
        if: github.event_name != 'release'

      - name: Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'release'
        run: |
          tag_name="${GITHUB_REF##*/}"
          for file in /tmp/*.prg; do mv "$file" "${file%.prg}-${tag_name}.prg"; done
          mv /tmp/RunPowerWorkout.iq /tmp/RunPowerWorkout-${tag_name}.iq
          hub release edit $(find /tmp/ -type f \( -name '*.prg' -o -name '*.iq' \) -printf "-a %p ") -m "" "$tag_name"
